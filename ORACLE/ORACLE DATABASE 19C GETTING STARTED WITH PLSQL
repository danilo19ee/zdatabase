+++++++++++++++++++++++++++++++++++++++++++++++++++++++
+   ORACLE DATABASE 19C GETTING STARTED WITH PL/SQL    +
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

#Definition of PL/SQL
 PL/SQL (Procedural Language/Structured Query Language) is Oracle Corporation's procedural extension for SQL
 and the Oracle relational database. PL/SQL is available in Oracle Database (since version 7), TimesTen in-memory
 database (since version 11.2.1), and IBM DB2 (since version 9.7).
 The basic unit in PL/SQL is called a block, which is made up of three parts: a declarative part, an executable part,
 and an exception-building part.

DECLARE
<declarations section>
BEGIN
<executable command(s)>
EXCEPTION
<EXCEPTION handling>
END;

#COMPOSITION
*DECLARATTIONS- This section starts with the keyword DECLARE. 
It is an optional section and defines all variables, cursors, subprograms, and other elements to be used in the program.
*EXECUTABLE COMMANDS- This section is enclosed between the keywords BEGIN and END and it is a mandatory section. 
It consists of the executable PL/SQL statements of the program. 
It should have at least one executable line of code, which may be just a NULL command to indicate that nothing should be executed.
*EXCEPTIONS HANDLING- This section starts with the keyword EXCEPTION. This section is again optional and contains exception(s) that handle errors in the program.
*Every PL/SQL statement ends with a semicolon (;). PL/SQL blocks can be nested within other PL/SQL blocks using BEGIN and END.

#EXAMPLE

sqlplus / as sysdba

SQL*Plus: Release 19.0.0.0.0 - Production on Tue Mar 24 17:33:45 2020
Version 19.3.0.0.0
Copyright (c) 1982, 2019, Oracle.  All rights reserved.
Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL>  alter session set container=APPSPDB;
Session altered.

SQL> SET serveroutput ON
DECLARE
message CONSTANT VARCHAR2(32767):= 'Hello, World!';
BEGIN
DBMS_OUTPUT.put_line(message);
END;
/

Hello, World!
PL/SQL procedure successfully completed.

#OR

SQL> BEGIN
NULL;
END;
/  2    3    4

PL/SQL procedure successfully completed.

#NOTE
 Command SET serveroutput ON is required in SQL*Plus and SQL Developer clients to enable the output of DBMS_OUTPUT. 
 Without the command nothing is displayed.
 The END; line signals the end of the anonymous PL/SQL block. 
 To run the code from SQL command line, you may need to type / at the beginning of the first blank line after the last line of the code. 
 When the above code is executed at SQL prompt, it produces the following result:

#NOTE
 Missing excecutable instruction leads to an error, becouse PL/SQL does not support empty blocks. For example,
 excecution of code below leads to an error

SQL> BEGIN
END;
/  2    3
END;
*
ERROR at line 2:
ORA-06550: line 2, column 1:
PLS-00103: Encountered the symbol "END" when expecting one of the following:
( begin case declare exit for goto if loop mod null pragma
raise return select update while with <an identifier>
<a double-quoted delimited-identifier> <a bind variable> <<
continue close current delete fetch lock insert open rollback
savepoint set sql execute commit forall merge pipe purge
json_exists json_value json_query json_object json_array

#DIFFERENCE BETWEEN %TYPE AND %ROWTYPE
%TYPE: Used to declare a field with the same type as that of a specified table's column.
%ROWTYPE: Used to declare a record with the same types as found in the specified table, view or cursor (= multiple columns).

SQL> DECLARE
  vEmployeeName Employee.Name%TYPE;
BEGIN
  SELECT Name
  INTO vEmployeeName
  FROM Employee
  WHERE ROWNUM = 1;
  DBMS_OUTPUT.PUT_LINE(vEmployeeName);
END;
/

SQL> DECLARE
	rEmployee Employee%ROWTYPE;
BEGIN
	rEmployee.Name := 'Matt';
	rEmployee.Age := 31;
	DBMS_OUTPUT.PUT_LINE(rEmployee.Name);
	DBMS_OUTPUT.PUT_LINE(rEmployee.Age);
END;
/

#ABOUT PL/SQL
PL/SQL stands for Procedural Language extensions to SQL. PL/SQL is available only as an "enabling technology"
within other software products; it does not exist as a standalone language. You can use PL/SQL in the Oracle
relational database, in the Oracle Server, and in client-side application development tools, such as Oracle Forms.
Here are some of the ways you might use PL/SQL:



      
      
