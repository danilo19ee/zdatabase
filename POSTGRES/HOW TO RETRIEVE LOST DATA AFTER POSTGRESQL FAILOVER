+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+  HOW TO RETRIEVE LOST DATA AFTER POSTGRESQL FAILOVER  +
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1. Background 

PostgreSQL HA solutions are generally based on its native streaming replication technology, supporting synchronous replication and asynchronous replication modes.
Although the synchronous replication mode can ensure that data is not lost to the greatest extent, 
it is usually necessary to deploy at least three machines to ensure that there are more than two standby nodes.
Therefore, many one-master and one-standby HA clusters use asynchronous replication.
Under asynchronous replication, the primary database is down, and after switching the standby node to the new primary node, 
a small amount of recently updated data may be lost.
If the lost data is more important to the business, can it be retrieved from the database?

Here is how to retrieve these data

2. Principle

Basic process

1 - After the standby library is promoted to the new master, a new timeline will be generated. 
The starting point of this new timeline is called the bifurcation point.
2 - After the failure of the old master is repaired, the WAL file is parsed from the fork point on the old master, 
and all data changes generated by the committed transaction are parsed into SQL.
The premise is that the old primary disk is not damaged and can be started normally. However, 
the most common failure in production is a physical machine downtime, which can be recovered by restarting the machine.
3 - After the business gets these SQL, after manual confirmation, the data is supplemented.

In order to parse the complete SQL from WAL records, it is best to set wal_level to logical and have a primary key on the table.
At this point, for the DML statement we are concerned about, the WAL record contains enough information to restore the data change to SQL.
The details are as follows:

* INSERT
  WAL records contain complete tuple data, and SQL can be restored by combining table definitions in system tables.
  
* UPDATE
  The WAL record contains the complete updated tuple data. For the tuple before the update, it depends on the following conditions.

  - The table sets the replica identity full attribute
    WAL record contains complete tuple data before update
  - The table contains a replica identity key (or primary key) and the value of the replica identity key has changed
    The WAL record contains the field value of the replica identity key (or primary key) of the tuple before the update
  - other
    The WAL record does not contain the tuple data before the update
  
* DELETE
WAL records may contain deleted tuple information, depending on the following conditions.

The table sets the replica identity full attribute
WAL record contains complete deleted tuple data
The table contains a replica identity key (or primary key)
The WAL record contains the field value of the replica identity key (or primary key) of the deleted tuple
other
WAL records do not contain deleted tuple data

If wal_level is not logical or there is no primary key on the table, you can also parse out the tuple before the change from the historical FPI (FULL PAGE IANGE) in the WAL.
Therefore, in principle, it is completely feasible to parse SQL from WAL. And there are already open source tools that can support this work.

3. Tools

Use the revised walminer tool to parse WAL files.

