#####################################
#	POSTGRESQL 13 HSTORE EXTENSION	  #
#####################################

#NOTE
This module implements the hstore data type for storing sets of key/value pairs within a single PostgreSQL value. 
This can be useful in various scenarios, such as rows with many attributes that are rarely examined, or semi-structured data. 
Keys and values are simply text strings.
The text representation of an hstore, used for input and output, includes zero or more key => value pairs separated by commas. Some examples:

"paperback" => "5",
"publisher" => "postgresqltutorial.com",
"language"  => "English",
"ISBN-13"   => "978-1449370001",
"weight" => "1 ounces"

The order of the pairs is not significant (and may not be reproduced on output). 
Whitespace between pairs or around the => sign is ignored. 
Double-quote keys and values that include whitespace, commas, =s or >s. 
To include a double quote or a backslash in a key or value, escape it with a backslash.
Each key in an hstore is unique. If you declare an hstore with duplicate keys, 
only one will be stored in the hstore and there is no guarantee as to which will be kept:

postgres=# SELECT 'a=>1,a=>2'::hstore;
  hstore
----------
 "a"=>"1"
(1 row)

A value (but not a key) can be an SQL NULL. For example:

key => NULL

The NULL keyword is case-insensitive. Double-quote the NULL to treat it as the ordinary string “NULL”.

#ACCESS DATABASE AND INSTALL EXTENSION

[postgres@localhost ~]$ /usr/local/pgsql-13.2/bin/psql -U postgres
psql (13.2)
Type "help" for help.

postgres=# create extension hstore;
CREATE EXTENSION
postgres=# \dx
                           List of installed extensions
  Name   | Version |   Schema   |                   Description
---------+---------+------------+--------------------------------------------------
 hstore  | 1.7     | public     | data type for storing sets of (key, value) pairs
 plpgsql | 1.0     | pg_catalog | PL/pgSQL procedural language
(2 rows)

#CREATE TABLE AND INSERT VALUES

download file 


postgres=# drop table books cascade;

postgres=# drop sequence serial_books;

postgres=# drop function fn_gen_md5();

postgres=# CREATE SEQUENCE serial_books INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE;

postgres=# CREATE TABLE books (serial numeric(100) NOT NULL DEFAULT nextval('serial_books'::regclass), title VARCHAR (255), attr hstore, hashmd5 CHARACTER VARYING(256));

postgres=# CREATE OR REPLACE FUNCTION fn_gen_md5()
RETURNS TRIGGER AS
$BODY$
	BEGIN
		IF (NEW.hashmd5 IS NOT NULL AND TG_OP='INSERT')
	    THEN
	      RAISE EXCEPTION 'cannot insert into the column "hashmd5". It''s a generated column';
	    ELSEIF (TG_OP='UPDATE' AND NEW.hashmd5 <> OLD.hashmd5)
	    THEN
		      RAISE EXCEPTION 'cannot update the column "hashmd5". It''s a generated column';
	    END IF;
		NEW.hashmd5=md5(NEW.title||NEW.attr);
		RETURN NEW;
	END;
$BODY$
LANGUAGE plpgsql;

postgres=# CREATE TRIGGER trg_gen_md5
	BEFORE INSERT OR UPDATE
	ON books
	FOR EACH ROW
	EXECUTE FUNCTION fn_gen_md5();

postgres=# \d+ books
                                                        Table "public.books"
 Column  |          Type          | Collation | Nullable |              Default              | Storage  | Stats target | Description
---------+------------------------+-----------+----------+-----------------------------------+----------+--------------+-------------
 serial  | numeric(100,0)         |           | not null | nextval('serial_books'::regclass) | main     |              |
 title   | character varying(255) |           |          |                                   | extended |              |
 attr    | hstore                 |           |          |                                   | extended |              |
 hashmd5 | character varying(256) |           |          |                                   | extended |              |
Triggers:
    trg_gen_md5 BEFORE INSERT OR UPDATE ON books FOR EACH ROW EXECUTE FUNCTION fn_gen_md5()
Access method: heap

postgres=# SELECT attr FROM books limit 10;
                                                                                                                                                   attr
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 "isbn"=>"1933988673", "status"=>"PUBLISH", "authors"=>"W. Frank Ableson,Charlie Collins,Robi Sen", "pageCount"=>"416", "categories"=>"Open Source,Mobile", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg", "publishedDate"=>"2009-04-01T00:00:00.000-0700"
 "isbn"=>"1935182722", "status"=>"PUBLISH", "authors"=>"W. Frank Ableson,Robi Sen", "pageCount"=>"592", "categories"=>"Java", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson2.jpg", "publishedDate"=>"2011-01-14T00:00:00.000-0800"
 "isbn"=>"1617290084", "status"=>"PUBLISH", "authors"=>"Gojko Adzic", "pageCount"=>"0", "categories"=>"Software Engineering", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/adzic.jpg", "publishedDate"=>"2011-06-03T00:00:00.000-0700"
 "isbn"=>"1933988746", "status"=>"PUBLISH", "authors"=>"Tariq Ahmed with Jon Hirschi,Faisal Abid", "pageCount"=>"576", "categories"=>"Internet", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed.jpg", "publishedDate"=>"2009-02-02T00:00:00.000-0800"
 "isbn"=>"1935182420", "status"=>"PUBLISH", "authors"=>"Tariq Ahmed,Dan Orlando,John C. Bland II,Joel Hooks", "pageCount"=>"600", "categories"=>"Internet", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed2.jpg", "publishedDate"=>"2010-11-15T00:00:00.000-0800"
 "isbn"=>"1933988312", "status"=>"PUBLISH", "authors"=>"Satnam Alag", "pageCount"=>"425", "categories"=>"Internet", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/alag.jpg", "publishedDate"=>"2008-10-01T00:00:00.000-0700"
 "isbn"=>"1933988320", "status"=>"PUBLISH", "authors"=>"Rob Allen,Nick Lo,Steven Brown", "pageCount"=>"432", "categories"=>"Web Development", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/allen.jpg", "publishedDate"=>"2008-12-01T00:00:00.000-0800"
 "isbn"=>"1933988797", "status"=>"PUBLISH", "authors"=>"Bernerd Allmon,Jeremy Anderson", "pageCount"=>"265", "categories"=>"Internet", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/allmon.jpg", "publishedDate"=>"2010-10-15T00:00:00.000-0700"
 "isbn"=>"1935182234", "status"=>"PUBLISH", "authors"=>"Andres Almiray,Danno Ferrin,James Shingler", "pageCount"=>"375", "categories"=>"Java", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/almiray.jpg", "publishedDate"=>"2012-06-04T00:00:00.000-0700"
 "isbn"=>"193518217X", "status"=>"PUBLISH", "authors"=>"Alexandre de Castro Alves", "pageCount"=>"325", "categories"=>"Java", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/alves.jpg", "publishedDate"=>"
2011-12-12T00:00:00.000-0800"
(10 rows)

Time: 1.643 ms

postgres=# EXPLAIN ANALYSE SELECT attr FROM books;
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..16.85 rows=285 width=274) (actual time=0.017..0.116 rows=285 loops=1)
 Planning Time: 0.221 ms
 Execution Time: 0.155 ms
(3 rows)

Time: 1.173 ms

postgres=# SELECT attr -> 'isbn' AS isbn FROM books limit 10;
    isbn
------------
 1933988673
 1935182722
 1617290084
 1933988746
 1935182420
 1933988312
 1933988320
 1933988797
 1935182234
 193518217X
(10 rows)

Time: 1.088 ms

postgres=# explain analyse SELECT attr -> 'isbn' AS isbn FROM books;
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..17.56 rows=285 width=32) (actual time=0.026..0.163 rows=285 loops=1)
 Planning Time: 0.061 ms
 Execution Time: 0.208 ms
(3 rows)

Time: 0.885 ms

postgres=# SELECT title, attr -> 'authors' AS authors FROM books WHERE attr -> 'isbn' = '1933988797';
    title     |            authors
--------------+--------------------------------
 Flex on Java | Bernerd Allmon,Jeremy Anderson
(1 row)

Time: 1.089 ms

postgres=# explain analyse SELECT title, attr -> 'authors' AS authors FROM books WHERE attr -> 'isbn' = '1933988797';
                                           QUERY PLAN
-------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..18.28 rows=1 width=57) (actual time=0.034..0.164 rows=1 loops=1)
   Filter: ((attr -> 'isbn'::text) = '1933988797'::text)
   Rows Removed by Filter: 284
 Planning Time: 0.076 ms
 Execution Time: 0.190 ms
(5 rows)

Time: 1.693 ms

postgres=# UPDATE books SET attr = attr || '"freeshipping"=>"yes"' :: hstore;
UPDATE 285
Time: 14.734 ms

postgres=# SELECT title, attr -> 'freeshipping' AS freeshipping FROM books limit 10;
               title               | freeshipping
-----------------------------------+--------------
 Swing                             | yes
 Multimedia Computing              | yes
 Unlocking Android                 | yes
 Android in Action, Second Edition | yes
 Specification by Example          | yes
 Flex 3 in Action                  | yes
 Flex 4 in Action                  | yes
 Collective Intelligence in Action | yes
 Zend Framework in Action          | yes
 Flex on Java                      | yes
(10 rows)

Time: 1.395 ms

postgres=# explain analyse SELECT title, attr -> 'freeshipping' AS freeshipping FROM books;
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..35.12 rows=570 width=57) (actual time=0.035..0.342 rows=285 loops=1)
 Planning Time: 0.061 ms
 Execution Time: 0.387 ms
(3 rows)

Time: 1.152 ms

postgres=# UPDATE books SET attr = attr || '"freeshipping"=>"no"' :: hstore;
UPDATE 285
Time: 11.520 ms

postgres=# UPDATE books SET attr = delete(attr, 'freeshipping');
UPDATE 285
Time: 12.740 ms

postgres=# SELECT title, attr->'categories' as publisher, attr FROM books WHERE attr ? 'categories' limit 10;
               title               |      publisher       |                                                                                                                                                   attr

-----------------------------------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Core OWL 5.0                      | Programming          | "isbn"=>"1884777503", "status"=>"PUBLISH", "authors"=>"Ted Neward", "pageCount"=>"500", "categories"=>"Programming", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/neward.jpg", "publishedDate"=>"1997-12-01T00:00:00.000-0800"
 Swing                             | Java                 | "isbn"=>"1884777848", "status"=>"PUBLISH", "authors"=>"Matthew Robinson,Pavel Vorobiev", "pageCount"=>"0", "categories"=>"Java", "publishedDate"=>"1999-12-01T00:00:00.000-0800" 
 Up to Speed with Swing            | 0                    | "isbn"=>"1884777643", "status"=>"PUBLISH", "authors"=>"Steven J. Gutz", "pageCount"=>"0", "categories"=>"0", "publishedDate"=>"1998-05-01T00:00:00.000-0700"
 Multimedia Computing              | 0                    | "isbn"=>"020152029X", "status"=>"PUBLISH", "authors"=>"Matthew E. Hodges", "pageCount"=>"0", "categories"=>"0", "publishedDate"=>"1993-09-01T00:00:00.000-0700" 
 Unlocking Android                 | Open Source,Mobile   | "isbn"=>"1933988673", "status"=>"PUBLISH", "authors"=>"W. Frank Ableson,Charlie Collins,Robi Sen", "pageCount"=>"416", "categories"=>"Open Source,Mobile", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg", "publishedDate"=>"2009-04-01T00:00:00.000-0700"
 Android in Action, Second Edition | Java                 | "isbn"=>"1935182722", "status"=>"PUBLISH", "authors"=>"W. Frank Ableson,Robi Sen", "pageCount"=>"592", "categories"=>"Java", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson2.jpg", "publishedDate"=>"2011-01-14T00:00:00.000-0800"
 Specification by Example          | Software Engineering | "isbn"=>"1617290084", "status"=>"PUBLISH", "authors"=>"Gojko Adzic", "pageCount"=>"0", "categories"=>"Software Engineering", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/adzic.jpg", "publishedDate"=>"2011-06-03T00:00:00.000-0700"
 Flex 3 in Action                  | Internet             | "isbn"=>"1933988746", "status"=>"PUBLISH", "authors"=>"Tariq Ahmed with Jon Hirschi,Faisal Abid", "pageCount"=>"576", "categories"=>"Internet", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed.jpg", "publishedDate"=>"2009-02-02T00:00:00.000-0800"
 Flex 4 in Action                  | Internet             | "isbn"=>"1935182420", "status"=>"PUBLISH", "authors"=>"Tariq Ahmed,Dan Orlando,John C. Bland II,Joel Hooks", "pageCount"=>"600", "categories"=>"Internet", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed2.jpg", "publishedDate"=>"2010-11-15T00:00:00.000-0800"
 Collective Intelligence in Action | Internet             | "isbn"=>"1933988312", "status"=>"PUBLISH", "authors"=>"Satnam Alag", "pageCount"=>"425", "categories"=>"Internet", "thumbnailUrl"=>"https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/alag.jpg", "publishedDate"=>"2008-10-01T00:00:00.000-0700"
(10 rows)

Time: 1.381 ms

postgres=# explain analyse SELECT title, attr->'categories' as publisher, attr FROM books WHERE attr ? 'categories';
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..45.27 rows=285 width=331) (actual time=0.034..0.214 rows=285 loops=1)
   Filter: (attr ? 'categories'::text)
 Planning Time: 0.285 ms
 Execution Time: 0.259 ms
(4 rows)

Time: 1.251 ms

postgres=# SELECT title FROM books WHERE attr @> '"categories"=>"Java"' :: hstore limit 10;
                 title
---------------------------------------
 Swing
 Android in Action, Second Edition
 Griffon in Action
 OSGi in Depth
 Hibernate in Action
 Hibernate in Action (Chinese Edition)
 Java Persistence with Hibernate
 Hibernate Search in Action
 jQuery in Action, Second Edition
 Spring Dynamic Modules in Action
(10 rows)

Time: 1.084 ms

postgres=# explain analyse SELECT title FROM books WHERE attr @> '"categories"=>"Java"' :: hstore;
                                            QUERY PLAN
---------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..44.56 rows=52 width=25) (actual time=0.032..0.163 rows=67 loops=1)
   Filter: (attr @> '"categories"=>"Java"'::hstore)
   Rows Removed by Filter: 218
 Planning Time: 0.169 ms
 Execution Time: 0.189 ms
(5 rows)

Time: 0.945 ms

postgres=# SELECT akeys (attr) FROM books limit 10;
                                 akeys
-----------------------------------------------------------------------
 {isbn,status,authors,pageCount,categories,thumbnailUrl,publishedDate}
 {isbn,status,authors,pageCount,categories,publishedDate}
 {isbn,status,authors,pageCount,categories,publishedDate}
 {isbn,status,authors,pageCount,categories,publishedDate}
 {isbn,status,authors,pageCount,categories,thumbnailUrl,publishedDate}
 {isbn,status,authors,pageCount,categories,thumbnailUrl,publishedDate}
 {isbn,status,authors,pageCount,categories,thumbnailUrl,publishedDate}
 {isbn,status,authors,pageCount,categories,thumbnailUrl,publishedDate}
 {isbn,status,authors,pageCount,categories,thumbnailUrl,publishedDate}
 {isbn,status,authors,pageCount,categories,thumbnailUrl,publishedDate}
(10 rows)

Time: 0.617 ms

postgres=# explain analyse SELECT akeys (attr) FROM books;
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..44.56 rows=285 width=32) (actual time=0.036..0.473 rows=285 loops=1)
 Planning Time: 0.058 ms
 Execution Time: 0.524 ms
(3 rows)

Time: 1.067 ms

postgres=# SELECT count(1) FROM books WHERE attr ?& ARRAY [ 'isbn', 'pageCount','publishedDate','thumbnailUrl','status','authors','categories'];
 count
-------
   273
(1 row)

Time: 2.714 ms

postgres=# explain analyse SELECT count(1) FROM books WHERE attr ?& ARRAY [ 'isbn', 'pageCount','publishedDate','thumbnailUrl','status','authors','categories'];
                                                QUERY PLAN
-----------------------------------------------------------------------------------------------------------
 Aggregate  (cost=45.23..45.24 rows=1 width=8) (actual time=0.522..0.523 rows=1 loops=1)
   ->  Seq Scan on books  (cost=0.00..44.56 rows=268 width=0) (actual time=0.034..0.486 rows=273 loops=1)
         Filter: (attr ?& '{isbn,pageCount,publishedDate,thumbnailUrl,status,authors,categories}'::text[])
         Rows Removed by Filter: 12
 Planning Time: 0.346 ms
 Execution Time: 0.562 ms
(6 rows)

Time: 1.716 ms

postgres=# SELECT skeys (attr) FROM books limit 10;
     skeys
---------------
 isbn
 status
 authors
 pageCount
 categories
 thumbnailUrl
 publishedDate
 isbn
 status
 authors
(10 rows)

Time: 1.354 ms

postgres=# explain analyse SELECT skeys (attr) FROM books;
                                                 QUERY PLAN
------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..1470.99 rows=285000 width=32) (actual time=0.047..0.776 rows=1983 loops=1)
   ->  Seq Scan on books  (cost=0.00..43.85 rows=285 width=274) (actual time=0.039..0.169 rows=285 loops=1)
 Planning Time: 0.858 ms
 Execution Time: 1.436 ms
(4 rows)

Time: 4.244 ms

postgres=# SELECT avals (attr) FROM books limit 10;
                                                                                               avals
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {1884777503,PUBLISH,"Ted Neward",500,Programming,https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/neward.jpg,1997-12-01T00:00:00.000-0800}
 {1884777848,PUBLISH,"Matthew Robinson,Pavel Vorobiev",0,Java,1999-12-01T00:00:00.000-0800}
 {1884777643,PUBLISH,"Steven J. Gutz",0,0,1998-05-01T00:00:00.000-0700}
 {020152029X,PUBLISH,"Matthew E. Hodges",0,0,1993-09-01T00:00:00.000-0700}
 {1933988673,PUBLISH,"W. Frank Ableson,Charlie Collins,Robi Sen",416,"Open Source,Mobile",https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg,2009-04-01T00:00:00.000-0700}
 {1935182722,PUBLISH,"W. Frank Ableson,Robi Sen",592,Java,https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson2.jpg,2011-01-14T00:00:00.000-0800}
 {1617290084,PUBLISH,"Gojko Adzic",0,"Software Engineering",https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/adzic.jpg,2011-06-03T00:00:00.000-0700}
 {1933988746,PUBLISH,"Tariq Ahmed with Jon Hirschi,Faisal Abid",576,Internet,https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed.jpg,2009-02-02T00:00:00.000-0800}
 {1935182420,PUBLISH,"Tariq Ahmed,Dan Orlando,John C. Bland II,Joel Hooks",600,Internet,https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed2.jpg,2010-11-15T00:00:00.000-0800}
 {1933988312,PUBLISH,"Satnam Alag",425,Internet,https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/alag.jpg,2008-10-01T00:00:00.000-0700}
(10 rows)

Time: 1.149 ms

postgres=# explain analyse SELECT avals (attr) FROM books;
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..44.56 rows=285 width=32) (actual time=0.036..0.525 rows=285 loops=1)
 Planning Time: 0.058 ms
 Execution Time: 0.575 ms
(3 rows)

Time: 1.125 ms

postgres=# SELECT svals (attr) FROM books limit 10;
                                   svals
----------------------------------------------------------------------------
 1884777503
 PUBLISH
 Ted Neward
 500
 Programming
 https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/neward.jpg
 1997-12-01T00:00:00.000-0800
 1884777848
 PUBLISH
 Matthew Robinson,Pavel Vorobiev
(10 rows)

Time: 0.733 ms

postgres=# explain analyse SELECT svals (attr) FROM books;
                                                 QUERY PLAN
------------------------------------------------------------------------------------------------------------
 ProjectSet  (cost=0.00..1470.99 rows=285000 width=32) (actual time=0.034..0.672 rows=1983 loops=1)
   ->  Seq Scan on books  (cost=0.00..43.85 rows=285 width=274) (actual time=0.025..0.100 rows=285 loops=1)
 Planning Time: 0.066 ms
 Execution Time: 0.868 ms
(4 rows)

Time: 1.529 ms

postgres=# SELECT title, hstore_to_json (attr) json FROM books;
         title          |                                                                   json
------------------------+------------------------------------------------------------------------------------------------------------------------------------------
 PostgreSQL Tutorial    | {"weight": "11.2 ounces", "ISBN-13": "978-1449370000", "language": "English", "paperback": "243", "publisher": "postgresqltutorial.com"}
 PostgreSQL Cheat Sheet | {"weight": "1 ounces", "ISBN-13": "978-1449370001", "language": "English", "paperback": "5", "publisher": "postgresqltutorial.com"}
(2 rows)

postgres=# SELECT title, hstore_to_json (attr) json FROM books limit 10;
               title               |                                                                                                                                                    json
-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Core OWL 5.0                      | {"isbn": "1884777503", "status": "PUBLISH", "authors": "Ted Neward", "pageCount": "500", "categories": "Programming", "thumbnailUrl": "https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/neward.jpg", "publishedDate": "1997-12-01T00:00:00.000-0800"}
 Swing                             | {"isbn": "1884777848", "status": "PUBLISH", "authors": "Matthew Robinson,Pavel Vorobiev", "pageCount": "0", "categories": "Java", "publishedDate": "1999-12-01T00:00:00.000-0800"}
 Up to Speed with Swing            | {"isbn": "1884777643", "status": "PUBLISH", "authors": "Steven J. Gutz", "pageCount": "0", "categories": "0", "publishedDate": "1998-05-01T00:00:00.000-0700"}
 Multimedia Computing              | {"isbn": "020152029X", "status": "PUBLISH", "authors": "Matthew E. Hodges", "pageCount": "0", "categories": "0", "publishedDate": "1993-09-01T00:00:00.000-0700"}
 Unlocking Android                 | {"isbn": "1933988673", "status": "PUBLISH", "authors": "W. Frank Ableson,Charlie Collins,Robi Sen", "pageCount": "416", "categories": "Open Source,Mobile", "thumbnailUrl": "https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg", "publishedDate": "2009-04-01T00:00:00.000-0700"}
 Android in Action, Second Edition | {"isbn": "1935182722", "status": "PUBLISH", "authors": "W. Frank Ableson,Robi Sen", "pageCount": "592", "categories": "Java", "thumbnailUrl": "https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson2.jpg", "publishedDate": "2011-01-14T00:00:00.000-0800"}
 Specification by Example          | {"isbn": "1617290084", "status": "PUBLISH", "authors": "Gojko Adzic", "pageCount": "0", "categories": "Software Engineering", "thumbnailUrl": "https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/adzic.jpg", "publishedDate": "2011-06-03T00:00:00.000-0700"}
 Flex 3 in Action                  | {"isbn": "1933988746", "status": "PUBLISH", "authors": "Tariq Ahmed with Jon Hirschi,Faisal Abid", "pageCount": "576", "categories": "Internet", "thumbnailUrl": "https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed.jpg", "publishedDate": "2009-02-02T00:00:00.000-0800"}
 Flex 4 in Action                  | {"isbn": "1935182420", "status": "PUBLISH", "authors": "Tariq Ahmed,Dan Orlando,John C. Bland II,Joel Hooks", "pageCount": "600", "categories": "Internet", "thumbnailUrl": "https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed2.jpg", "publishedDate": "2010-11-15T00:00:00.000-0800"}
 Collective Intelligence in Action | {"isbn": "1933988312", "status": "PUBLISH", "authors": "Satnam Alag", "pageCount": "425", "categories": "Internet", "thumbnailUrl": "https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/alag.jpg", "publishedDate": "2008-10-01T00:00:00.000-0700"}
(10 rows)

Time: 1.080 ms

postgres=# explain analyse SELECT title, hstore_to_json (attr) json FROM books;
                                             QUERY PLAN
-----------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..44.56 rows=285 width=57) (actual time=0.039..1.294 rows=285 loops=1)
 Planning Time: 0.086 ms
 Execution Time: 1.339 ms
(3 rows)

Time: 2.002 ms

#EXAMPLE INDEXING BIG TABLES WITH HSTORE DATA

postgres=# CREATE TABLE entity (id serial NOT NULL PRIMARY KEY, store hstore);
CREATE TABLE

postgres=# INSERT INTO entity(store) SELECT ('key1 =>' || i || ',key2=>' || i || ',key3=>' || i)::hstore FROM generate_series(1,1000000) AS i;
INSERT 0 1000000
postgres=# INSERT INTO entity(store) SELECT ('key1 =>' || i || ',key2=>' || i)::hstore FROM generate_series(1000001,2000000) AS i;
INSERT 0 1000000
postgres=# INSERT INTO entity(store) SELECT ('key1 =>' || i)::hstore FROM generate_series(2000001,4000000) AS i;
INSERT 0 2000000
postgres=# INSERT INTO entity(store) SELECT ('key2 =>' || i)::hstore FROM generate_series(4000001,5500000) AS i;
INSERT 0 1500000
postgres=# INSERT INTO entity(store) SELECT ('key3 =>' || i)::hstore FROM generate_series(5500001,6000000) AS i;
INSERT 0 500000
postgres=# INSERT INTO entity(store) SELECT ''::hstore FROM generate_series(6000001,10000000) AS i;
INSERT 0 4000000

postgres=# \d+ entity
                                                Table "public.entity"
 Column |  Type   | Collation | Nullable |              Default               | Storage  | Stats target | Description
--------+---------+-----------+----------+------------------------------------+----------+--------------+-------------
 id     | integer |           | not null | nextval('entity_id_seq'::regclass) | plain    |              |
 store  | hstore  |           |          |                                    | extended |              |
Indexes:
    "entity_pkey" PRIMARY KEY, btree (id)
Access method: heap

postgres=# select count(1) FROM entity;
  count
----------
 10000000
(1 row)

postgres=# EXPLAIN ANALYZE SELECT count(*) FROM entity WHERE exist(store, 'key1');
                                                                  QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=128144.65..128144.66 rows=1 width=8) (actual time=905.441..907.177 rows=1 loops=1)
   ->  Gather  (cost=128144.43..128144.64 rows=2 width=8) (actual time=896.853..907.162 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=127144.43..127144.44 rows=1 width=8) (actual time=876.627..876.628 rows=1 loops=3)
               ->  Parallel Seq Scan on entity  (cost=0.00..123676.59 rows=1387136 width=0) (actual time=0.059..774.047 rows=1333333 loops=3)
                     Filter: exist(store, 'key1'::text)
                     Rows Removed by Filter: 2000000
 Planning Time: 0.706 ms
 Execution Time: 907.368 ms
(10 rows)

postgres=# EXPLAIN ANALYZE SELECT * FROM entity WHERE store->'key1' = '950555';
                                                         QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..140073.81 rows=49937 width=25) (actual time=134.879..787.523 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   ->  Parallel Seq Scan on entity  (cost=0.00..134080.11 rows=20807 width=25) (actual time=554.013..769.307 rows=0 loops=3)
         Filter: ((store -> 'key1'::text) = '950555'::text)
         Rows Removed by Filter: 3333333
 Planning Time: 0.125 ms
 Execution Time: 787.733 ms
(8 rows)

postgres=# CREATE UNIQUE INDEX hidx_entiry_store ON "entity" ((store -> 'key1'));
CREATE INDEX

postgres=# EXPLAIN ANALYZE SELECT count(*) FROM entity WHERE exist(store, 'key1');
                                                                  QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=128214.77..128214.78 rows=1 width=8) (actual time=898.208..902.894 rows=1 loops=1)
   ->  Gather  (cost=128214.56..128214.77 rows=2 width=8) (actual time=898.195..902.884 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=127214.56..127214.57 rows=1 width=8) (actual time=883.918..883.919 rows=1 loops=3)
               ->  Parallel Seq Scan on entity  (cost=0.00..123742.33 rows=1388889 width=0) (actual time=0.054..800.983 rows=1333333 loops=3)
                     Filter: exist(store, 'key1'::text)
                     Rows Removed by Filter: 2000000
 Planning Time: 0.409 ms
 Execution Time: 902.945 ms
(10 rows)

postgres=# EXPLAIN ANALYZE SELECT * FROM entity WHERE store->'key1' = '950555';
                                                        QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------
 Index Scan using hidx_entiry_store on entity  (cost=0.43..8.45 rows=1 width=25) (actual time=0.197..0.200 rows=1 loops=1)
   Index Cond: ((store -> 'key1'::text) = '950555'::text)
 Planning Time: 0.273 ms
 Execution Time: 0.227 ms
(4 rows)

postgres=# DROP INDEX hidx_entiry_store;
DROP INDEX

postgres=# CREATE UNIQUE INDEX hidx_entiry_store_exist ON "entity" ((store -> 'key1')) WHERE exist(store, 'key1');
CREATE INDEX

postgres=# EXPLAIN ANALYZE SELECT count(*) FROM entity WHERE exist(store, 'key1');
                                                                                    QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=71596.42..71596.43 rows=1 width=8) (actual time=387.262..387.392 rows=1 loops=1)
   ->  Gather  (cost=71596.21..71596.41 rows=2 width=8) (actual time=387.250..387.383 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=70596.21..70596.21 rows=1 width=8) (actual time=377.059..377.060 rows=1 loops=3)
               ->  Parallel Index Only Scan using hidx_entiry_store_exist on entity  (cost=0.43..67123.98 rows=1388889 width=0) (actual time=0.175..305.992 rows=1333333 loops=3)
                     Heap Fetches: 0
 Planning Time: 0.541 ms
 Execution Time: 387.501 ms
(9 rows)

postgres=# EXPLAIN ANALYZE SELECT * FROM entity WHERE store->'key1' = '950555';
                                                         QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------
 Gather  (cost=1000.00..140159.00 rows=50000 width=25) (actual time=859.803..867.615 rows=1 loops=1)
   Workers Planned: 2
   Workers Launched: 2
   ->  Parallel Seq Scan on entity  (cost=0.00..134159.00 rows=20833 width=25) (actual time=607.859..847.195 rows=0 loops=3)
         Filter: ((store -> 'key1'::text) = '950555'::text)
         Rows Removed by Filter: 3333333
 Planning Time: 0.228 ms
 Execution Time: 867.650 ms
(8 rows)

postgres=# EXPLAIN ANALYZE SELECT * FROM entity WHERE exist(store,'key1') AND store->'key1' = '950555';
                                                           QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------
 Index Scan using hidx_entiry_store_exist on entity  (cost=0.43..8.45 rows=1 width=25) (actual time=1.825..1.829 rows=1 loops=1)
   Index Cond: ((store -> 'key1'::text) = '950555'::text)
 Planning Time: 0.129 ms
 Execution Time: 1.860 ms
(4 rows)


