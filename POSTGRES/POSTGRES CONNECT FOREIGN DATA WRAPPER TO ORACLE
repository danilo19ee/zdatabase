+++++++++++++++++++++++++++++++++++++++++++++++++++++++
+   POSTGRES CONNECT FOREIGN DATA WRAPPER TO ORACLE   +
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

The objective of this procedure is to establish a database environment distributed between postgres database and oracle database, 
follow the steps

#DOWNLOAD RPMS FILES FROM ORACLE WEBSITE
oracle-instantclient11.2-basic-11.2.0.4.0-1.x86_64.rpm
oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm
oracle-instantclient11.2-tools-11.2.0.4.0-1.x86_64.rpm
oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm

#INSTALL RPMS ORACLE-INSTANTCLIENT
rpm -ivh oracle-instantclient11.2-basic-11.2.0.4.0-1.x86_64.rpm
rpm -ivh oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm
rpm -ivh oracle-instantclient11.2-tools-11.2.0.4.0-1.x86_64.rpm
rpm -ivh oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm

#ADD PERMISSIONS FOR POSTGRES DIRECTORIES
chown postgres:postgres -R /usr/local/pgsql/lib/
chown postgres:postgres -R /usr/local/pgsql/share/extension/
chown postgres:postgres -R /usr/local/pgsql/share/doc/extension

#CONFIGURE BASH PROFILE FOR USER POSTGRES
su - postgres
vi .bash_profile
export ORACLE_HOME=/usr/lib/oracle/11.2/client64
export PATH=$PATH:/usr/lib/oracle/11.2/client64/bin
export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client64/lib
export TNS_ADMIN=/usr/lib/oracle/11.2/client64/lib/network/admin
exit

#INSTALL ORACLE_FDW-1.0.0
wget http://api.pgxn.org/dist/oracle_fdw/1.0.0/oracle_fdw-1.0.0.zip
unzip oracle_fdw-1.0.0.zip
cd oracle_fdw-1.0.0

#CONFIGURE PG_CONFIGURE IN MAKE FILE
vi Makefile
PG_CONFIG = /usr/local/pgsql-9.4.5/bin/pg_config

#COMPILE AND INSTALL ORACLE_FDW-1.0.0
make; make install

#CONFIGURE ORACLE TNSNAMES.ORA
mkdir -p /usr/lib/oracle/11.2/client64/network/admin/
chmod 777 -R /usr/lib/oracle/11.2/client64/network
vi /usr/lib/oracle/11.2/client64/network/admin/tnsnames.ora
<STRING> =
(DESCRIPTION =
(ADDRESS_LIST =
(ADDRESS = (PROTOCOL = TCP)(HOST = <IP>)(PORT = <PORT>))
)
(CONNECT_DATA =
(SERVER = DEDICATED)
(ORACLE_SID = <SID>)
)
)

#configurar fdw do banco postgres para o banco oracle
/usr/local/pgsql/bin/psql -U postgres -d <DATABASE> -p <PORT>
CREATE EXTENSION ORACLE_FDW;
CREATE SERVER ORATST FOREIGN DATA WRAPPER oracle_fdw OPTIONS (dbserver '//<IP>:<PORT>/<SID>');
GRANT USAGE ON FOREIGN SERVER ORATST TO POSTGRES;
CREATE USER MAPPING FOR POSTGRES SERVER ORATST OPTIONS (user '<USER>', password '<password>');

#VALIDATE CONFIGURATION
SELECT oracle_diag();
oracle_diag
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 oracle_fdw 1.0.0, PostgreSQL 9.4.5, Oracle client 11.2.0.4.0, ORACLE_HOME=/usr/lib/oracle/11.2/client64,
TNS_ADMIN=/usr/lib/oracle/11.2/client64/lib/network/admin

#CREATE TABLE CONVERTING TYPES OF DATA BETWEEN ORACLE AND POSTGRES
CREATE FOREIGN TABLE <SCHEMA>.<TABLE>(
        COLUMN VARCHAR(8),
        COLUMN numeric(10,0),
        COLUMN DATE)
SERVER ORATST OPTIONS (schema '<SCHEMA>', table '<TABLE>');

#TEST SELECT 
SELECT COUNT(1) FROM <SCHEMA>.<TABLE>;

#######################################################################################################################################
These conversions are automatically handled by oracle_fdw:

Oracle type                    | Possible PostgreSQL types
-------------------------------+---------------------------------------------
CHAR                           | char, varchar, text
NCHAR                          | char, varchar, text
VARCHAR                        | char, varchar, text
VARCHAR2                       | char, varchar, text
NVARCHAR2                      | char, varchar, text
CLOB                           | char, varchar, text
LONG                           | char, varchar, text
RAW                            | uuid, bytea
BLOB                           | bytea
BFILE                          | bytea (read-only)
LONG RAW                       | bytea
NUMBER                         | numeric, float4, float8, char, varchar, text
NUMBER(n,m) with m<=0          | numeric, float4, float8, int2, int4, int8,
                               |   boolean, char, varchar, text
FLOAT                          | numeric, float4, float8, char, varchar, text
BINARY_FLOAT                   | numeric, float4, float8, char, varchar, text
BINARY_DOUBLE                  | numeric, float4, float8, char, varchar, text
DATE                           | date, timestamp, timestamptz, char,
                               |   varchar, text
TIMESTAMP                      | date, timestamp, timestamptz, char,
                               |   varchar, text
TIMESTAMP WITH TIME ZOME       | date, timestamp, timestamptz, char,
                               |   varchar, text
TIMESTAMP WITH LOCAL TIME ZOME | date, timestamp, timestamptz, char,
                               |   varchar, text
INTERVAL YEAR TO MONTH         | interval, char, varchar, text
INTERVAL DAY TO SECOND         | interval, char, varchar, text

If a NUMBER is converted to a boolean, "0" means "false", everything else "true".

NCLOB is currently not supported because Oracle cannot automatically convert
it to the client encoding.

If you need conversions exceeding the above, define an appropriate view in
Oracle or PostgreSQL.

