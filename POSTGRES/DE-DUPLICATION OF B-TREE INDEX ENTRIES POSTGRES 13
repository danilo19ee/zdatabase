++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+    DE-DUPLICATION OF B-TREE INDEX ENTRIES POSTGRES 13  +
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#NOTE
Deduplication results in a smaller index size for indexes with repeating entries. 
This saves disk space and, even more importantly, RAM when the index is cached in shared buffers. 
Scanning the index becomes faster, and index bloat is reduced.
 _______________
| Postgres 11.3	|
|_______________|

postgres=# CREATE TABLE foo(id INTEGER, name TEXT);

postgres=# INSERT INTO foo VALUES(generate_series(1, 1000000), 'value');
INSERT 0 1000000

postgres=# select pg_size_pretty(pg_relation_size('foo'));
 pg_size_pretty 
----------------
 42 MB
(1 row)

postgres=# CREATE INDEX idx ON foo (name);

postgres=# SELECT pg_size_pretty(pg_relation_size('idx'));
 pg_size_pretty 
----------------
 21 MB
(1 row)

 _______________
| Postgres 13 	|
|_______________|

postgres=# CREATE TABLE foo(id INTEGER, name TEXT);

postgres=# INSERT INTO foo VALUES(generate_series(1, 1000000), 'value');
INSERT 0 1000000

postgres=# select pg_size_pretty(pg_relation_size('foo'));
 pg_size_pretty 
----------------
 42 MB
(1 row)

postgres=# CREATE INDEX idx ON foo (name);

postgres=# select pg_size_pretty(pg_relation_size('idx'));
 pg_size_pretty 
----------------
 6792 kB
(1 row)

#NOTE
If the base is migrated from any version to version 13. I recommend that a vacuumdb be performed and then reindexdb
