####################################################
# POSTGRES IDENTIFY DUPLICATED AND UNUSED INDEXES  #
####################################################

-- check for exact matches
SELECT indrelid::regclass
     , array_agg(indexrelid::regclass)
  FROM pg_index
 GROUP BY indrelid
     , indkey
HAVING COUNT(*) > 1;

-- check for matches on only the first column of the index
-- requires some human eyeballing to verify
SELECT indrelid::regclass
     , array_agg(indexrelid::regclass)
  FROM pg_index
 GROUP BY indrelid
     , indkey[0]
HAVING COUNT(*) > 1;

-- check for matches, size and list duplicated indexes
SELECT pg_size_pretty(sum(pg_relation_size(idx))::bigint) as size,
       (array_agg(idx))[1] as idx1, (array_agg(idx))[2] as idx2,
       (array_agg(idx))[3] as idx3, (array_agg(idx))[4] as idx4
FROM (
    SELECT indexrelid::regclass as idx, (indrelid::text ||E'\n'|| indclass::text ||E'\n'|| indkey::text ||E'\n'||
                                         coalesce(indexprs::text,'')||E'\n' || coalesce(indpred::text,'')) as key
    FROM pg_index) sub
GROUP BY key HAVING count(*)>1
ORDER BY sum(pg_relation_size(idx)) DESC;

-- check unused indexes 
SELECT PSUI.indexrelid::regclass AS IndexName, 
PSUI.relid::regclass AS TableName 
FROM pg_stat_user_indexes AS PSUI JOIN pg_index AS PI ON PSUI.IndexRelid = PI.IndexRelid 
WHERE PSUI.idx_scan = 0 AND PI.indisunique IS FALSE;






