#####################
# POSTGRES 13 JSONB #
#####################

#NOSQL IN POSTGRES EVOLUTION

HSTORE - 2003
● Perl-like hash storage
● No nesting, no arrays
● Indexing

JSON - 2012
● Textual storage
● JSON validation

JSONB - 2014
● Binary storage
● Nesting objects & arrays
● Indexing

JSONPATH - 2019
● SQL/JSON — 2016
● Indexing

SQL/JSON — 202?
● Complete SQL/JSON
● Better indexing, syntax

#JSON TYPES

Jsonb vs Json
SELECT j::json AS json, j::jsonb AS jsonb FROM
(SELECT '{"cc":0, "aa": 2, "aa":1,"b":1}' AS j) AS foo;
 json | jsonb
----------------------------------+----------------------------
{"cc":0, "aa": 2, "aa":1,"b":1} | {"b": 1, "aa": 1, "cc": 0}
• json: textual storage «as is»
• jsonb: binary storage, no need to parse, has index support
• jsonb: no whitespaces, no duplicated keys (last key win)
• jsonb: keys are sorted by (length, key)
• jsonb: a rich set of functions (\df jsonb*), "arrow" operators
• jsonb: great performance, thanks to indexes
• JsQuery ext. - json query language with GIN indexing support

#JSON PATH
• JSON Path expression specify the parts of json. It is
an optional path mode 'strict' or 'lax' (default), followed by a path or
unary/binary expression on paths. Path is a sequence of path elements,
started from path variable, path literal or expression in parentheses and
zero or more operators ( JSON accessors, filters, and item methods )

#SQL/JSON STANDARD CONFORMANCE
+----------------+------------------------------+-----------------------+-------------------------------+-------------------------------+
SQL/JSON feature | PostgreSQL 12		| Oracle 18c		| MySQL 8.0.4			| SQL Server 2017		|
+----------------+------------------------------+-----------------------+-------------------------------+-------------------------------+
JSON PATH :15	 | 15/15 			| 11/15 		| 5/15 				| 2/15				|
+----------------+------------------------------+-----------------------+-------------------------------+-------------------------------+
 PostgreSQL 13 has the best implementation of JSON Path 

#JSONB OPERATORS & FUNCTIONS

----------------+-------------------------------------------------------------------------------------------------------------------------------------------------
Operator	|	Description								
----------------+-------------------------------------------------------------------------------------------------------------------------------------------------
->	Get JSON array element (indexed from zero, negative integers count from the end)
->	Get JSON object field by key
->>	Get JSON array element as text
->>	Get JSON object field as text
#>	Get JSON object at the specified path
#>>	Get JSON object at the specified path as text
@>	Does the left JSON value contain the right JSON path/value entries at the top level?
<@	Are the left JSON path/value entries contained at the top level within the right JSON value?
?	Does the string exist as a top-level key within the JSON value?
?|	Do any of these array strings exist as top-level keys?
?&	Do all of these array strings exist as top-level keys?
||	Concatenate two jsonb values into a new jsonb value
-	Delete key/value pair or string element from left operand. Key/value pairs are matched based on their key value.
-	Delete multiple key/value pairs or string elements from left operand. Key/value pairs are matched based on their key value.
-	Delete the array element with specified index (Negative integers count from the end). Throws an error if top level container is not an array.
#-	Delete the field or element with specified path (for JSON arrays, negative integers count from the end)
@?	Does JSON path return any item for the specified JSON value?
@@	Returns the result of JSON path predicate check for the specified JSON value. Only the first item of the result is taken into account. If the result is not Boolean, then null is returned.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

#EXAMPLE WORKING WITH JSONB

#CREATE TABLE AND INSERT VALUES

postgres=# drop table books cascade;

postgres=# drop sequence serial_books;

postgres=# drop function fn_gen_md5();

postgres=# CREATE SEQUENCE serial_books INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE;

postgres=# CREATE TABLE books (serial numeric(100) NOT NULL DEFAULT nextval('serial_books'::regclass), title VARCHAR (255), attr jsonb, timestamp timestamp, hashmd5 CHARACTER VARYING(256) PRIMARY KEY);

postgres=# CREATE OR REPLACE FUNCTION fn_gen_md5()
RETURNS TRIGGER AS
$BODY$
	BEGIN
		IF (NEW.hashmd5 IS NOT NULL AND TG_OP='INSERT')
	    THEN
	      RAISE EXCEPTION 'cannot insert into the column "hashmd5". It''s a generated column';
	    ELSEIF (TG_OP='UPDATE' AND NEW.hashmd5 <> OLD.hashmd5)
	    THEN
		      RAISE EXCEPTION 'cannot update the column "hashmd5". It''s a generated column';
	    END IF;
		NEW.hashmd5=md5(NEW.title||NEW.attr);
		RETURN NEW;
	END;
$BODY$
LANGUAGE plpgsql;

postgres=# CREATE TRIGGER trg_gen_md5
	BEFORE INSERT OR UPDATE
	ON books
	FOR EACH ROW
	EXECUTE FUNCTION fn_gen_md5();

jsonb=# \d+ books
                                                            Table "public.books"
  Column   |            Type             | Collation | Nullable |              Default              | Storage  | Stats target | Description 
-----------+-----------------------------+-----------+----------+-----------------------------------+----------+--------------+-------------
 serial    | numeric(100,0)              |           | not null | nextval('serial_books'::regclass) | main     |              | 
 title     | character varying(255)      |           |          |                                   | extended |              | 
 attr      | jsonb                       |           |          |                                   | extended |              | 
 timestamp | timestamp without time zone |           |          |                                   | plain    |              | 
 hashmd5   | character varying(256)      |           | not null |                                   | extended |              | 
Indexes:
    "books_pkey" PRIMARY KEY, btree (hashmd5)
Triggers:
    trg_gen_md5 BEFORE INSERT OR UPDATE ON books FOR EACH ROW EXECUTE FUNCTION fn_gen_md5()
Access method: heap

download file and run inserts https://github.com/danilo19ee/zdatabase/blob/master/POSTGRES/TRAINING/LOAD%20BOOK%20INSERTS%20JSONB

postgres=#\timing
Timing is on.

postgres=# SELECT attr FROM books limit 10;
		attr                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"isbn": "1933988673", "status": "PUBLISH", "authors": ["W. Frank Ableson", "Charlie Collins", "Robi Sen"], "pageCount": "416", "categories": "Open Source,Mobile", "thumbnailUrl":
 "s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg", "publishedDate": "2009-04-01T00:00:00.000-0700"}
 {"isbn": "1935182722", "status": "PUBLISH", "authors": ["W. Frank Ableson", "Robi Sen"], "pageCount": "592", "categories": "Java", "thumbnailUrl": "s3.amazonaws.com/AKIAJC5RLADLUM
VRPFDQ.book-thumb-images/ableson2.jpg", "publishedDate": "2011-01-14T00:00:00.000-0800"}
 {"isbn": "1617290084", "status": "PUBLISH", "authors": ["Gojko Adzic"], "pageCount": "0", "categories": "Software Engineering", "thumbnailUrl": "s3.amazonaws.com/AKIAJC5RLADLUMVRP
FDQ.book-thumb-images/adzic.jpg", "publishedDate": "2011-06-03T00:00:00.000-0700"}
 {"isbn": "1933988746", "status": "PUBLISH", "authors": ["Tariq Ahmed", "Jon Hirschi", "Faisal Abid"], "pageCount": "576", "categories": "Internet", "thumbnailUrl": "s3.amazonaws.c
om/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed.jpg", "publishedDate": "2009-02-02T00:00:00.000-0800"}
 {"isbn": "1935182420", "status": "PUBLISH", "authors": ["Tariq Ahmed", "Dan Orlando", "John C. Bland II", "Joel Hooks"], "pageCount": "600", "categories": "Internet", "thumbnailUr
l": "s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ahmed2.jpg", "publishedDate": "2010-11-15T00:00:00.000-0800"}
 {"isbn": "1933988312", "status": "PUBLISH", "authors": ["Satnam Alag"], "pageCount": "425", "categories": "Internet", "thumbnailUrl": "s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-t
humb-images/alag.jpg", "publishedDate": "2008-10-01T00:00:00.000-0700"}
 {"isbn": "1933988320", "status": "PUBLISH", "authors": ["Rob Allen", "Nick Lo,Steven Brown"], "pageCount": "432", "categories": "Web Development", "thumbnailUrl": "s3.amazonaws.co
m/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/allen.jpg", "publishedDate": "2008-12-01T00:00:00.000-0800"}
 {"isbn": "1933988797", "status": "PUBLISH", "authors": ["Bernerd Allmon", "Jeremy Anderson"], "pageCount": "265", "categories": "Internet", "thumbnailUrl": "s3.amazonaws.com/AKIAJ
C5RLADLUMVRPFDQ.book-thumb-images/allmon.jpg", "publishedDate": "2010-10-15T00:00:00.000-0700"}
 {"isbn": "1935182234", "status": "PUBLISH", "authors": ["Andres Almiray", "Danno Ferrin", "James Shingler"], "pageCount": "375", "categories": "Java", "thumbnailUrl": "s3.amazonaw
s.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/almiray.jpg", "publishedDate": "2012-06-04T00:00:00.000-0700"}
 {"isbn": "193518217X", "status": "PUBLISH", "authors": ["Alexandre de Castro Alves"], "pageCount": "325", "categories": "Java", "thumbnailUrl": "s3.amazonaws.com/AKIAJC5RLADLUMVRP
FDQ.book-thumb-images/alves.jpg", "publishedDate": "2011-12-12T00:00:00.000-0800"}
(10 rows)

Time: 0,400 ms

postgres=# EXPLAIN ANALYSE SELECT attr FROM books;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..14.98 rows=98 width=32) (actual time=0.013..0.201 rows=285 loops=1)
 Planning Time: 0.057 ms
 Execution Time: 0.274 ms
(3 rows)

#QUERY VALUE FOR A SPECIFIC KEY

postgres=# SELECT attr -> 'isbn' AS isbn FROM books limit 10;
     isbn     
--------------
 "1933988673"
 "1935182722"
 "1617290084"
 "1933988746"
 "1935182420"
 "1933988312"
 "1933988320"
 "1933988797"
 "1935182234"
 "193518217X"
(10 rows)

Time: 0,386 ms

postgres=# explain analyse SELECT attr -> 'isbn' AS isbn FROM books;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..15.22 rows=98 width=32) (actual time=0.018..0.139 rows=285 loops=1)
 Planning Time: 0.055 ms
 Execution Time: 0.163 ms
(3 rows)

####

jsonb=# SELECT title, attr -> 'authors' AS authors FROM books WHERE attr -> 'isbn' ? '1933988797';
    title     |                authors                
--------------+---------------------------------------
 Flex on Java | ["Bernerd Allmon", "Jeremy Anderson"]
(1 row)

Time: 0,467 ms

jsonb=# explain analyse SELECT title, attr -> 'authors' AS authors FROM books WHERE attr -> 'isbn' ? '1933988797';
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Seq Scan on books  (cost=0.00..15.47 rows=1 width=548) (actual time=0.019..0.136 rows=1 loops=1)
   Filter: ((attr -> 'isbn'::text) ? '1933988797'::text)
   Rows Removed by Filter: 284
 Planning Time: 0.082 ms
 Execution Time: 0.215 ms
(5 rows)

Time: 0,863 ms

jsonb=# CREATE INDEX idx_books_attr_gin ON books USING gin (attr);
CREATE INDEX
Time: 6,243 ms

jsonb=# CREATE INDEX idx_books_attr_gin_jsonbops ON books USING GIN (attr jsonb_ops);
CREATE INDEX
Time: 6,869 ms

jsonb=# CREATE INDEX idx_books_attr_ginpathops ON books USING gin (attr jsonb_path_ops);
CREATE INDEX
Time: 3,605 ms

jsonb=# CREATE INDEX idx_books_attr_isbn_btree ON books USING BTREE ((attr->>'isbn'));
CREATE INDEX
Time: 2,971 ms

jsonb=# CREATE INDEX idx_books_attr_isbn_hash ON books USING HASH ((attr->>'isbn'));
CREATE INDEX
Time: 1,717 ms

jsonb=# CREATE INDEX idx_books_attr_isbn_gin ON books USING gin ((attr->'isbn'));
CREATE INDEX
Time: 3,835 ms

