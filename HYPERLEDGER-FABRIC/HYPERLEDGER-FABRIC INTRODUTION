++++++++++++++++++++++++++++++++++++
+  HYPERLEDGER-FABRIC INTRODUTION  +
++++++++++++++++++++++++++++++++++++

#NOTE
Ledger 
Audience: Architects, Application and smart contract developers, administrators
A ledger is a key concept in Hyperledger Fabric; it stores important factual information about business objects; 
both the current value of the attributes of the objects, and the history of transactions that resulted in these current values.

In Hyperledger Fabric, a ledger consists of two distinct, though related, parts – a world state and a blockchain. 
Each of these represents a set of facts about a set of business objects.

Firstly, there’s a world state – a database that holds current values of a set of ledger states. 
The world state makes it easy for a program to directly access the current value of a state rather than having to calculate 
it by traversing the entire transaction log. 
Ledger states are, by default, expressed as key-value pairs, and we’ll see later how Hyperledger Fabric provides flexibility in this regard. 
The world state can change frequently, as states can be created, updated and deleted.

Secondly, there’s a blockchain – a transaction log that records all the changes that have resulted in the current the world state. 
Transactions are collected inside blocks that are appended to the blockchain – enabling you to understand the history of 
changes that have resulted in the current world state. The blockchain data structure is very different to the world state because once written, 
it cannot be modified; it is immutable.

It’s helpful to think of there being one logical ledger in a Hyperledger Fabric network. 
In reality, the network maintains multiple copies of a ledger – which are kept consistent with every other copy through a process called consensus. 
The term Distributed Ledger Technology (DLT) is often associated with this kind of ledger – one that is logically singular, 
but has many consistent copies distributed throughout a network.

